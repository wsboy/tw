<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- ******前面的这些都是今天的重点，下面是重点的开始，我们配置的数据源是德鲁伊druid数据源，这个才是重点****** -->
    <!-- ========================================================-->
    <!-- 使用druid作为数据源连接池-->
    <bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库的配置，host：主机名，port：端口，database：数据库 -->
        <property name="url" value="jdbc:mysql://${mysql.host}:${mysql.port}/${mysql.database}?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"/>
        <!-- 连接数据的用户名-->
        <property name="username" value="${mysql.user}"/>
        <!-- 连接数据库的密码-->
        <property name="password" value="${mysql.pwd}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="30000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 "/>

        <!-- 重要的配置：监控统计拦截的日志记录 -->
        <!-- 并在filters属性中配置了log4j，ref中的bean是下面拦截器的配置 -->
        <!-- proxyFilters和filters是组合关系,前者是根据bean配置,后者根据别名配置的-->
        <!-- stat是statFilter的别名,log4j是logFilter的别名-->
        <!-- 监控统计拦截的filters,日志记录,这里开启了stat,wall（sql翻过墙过滤监控）,log4j（log4j的监控）配置 -->
        <property name="proxyFilters">
            <list>
                <ref bean="statFilter"/>
                <ref bean="logFilter"/>
            </list>
        </property>
        <property name="filters" value="stat,wall,log4j"/>
        <!--  *end* -->
    </bean>

    <!--Druid内置提供一个StatFilter，用于统计监控信息。-->
    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 开启合并sql -->
        <property name="mergeSql" value="true"/>
        <!-- 开启慢查询语句,1秒 -->
        <property name="slowSqlMillis" value="1000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter">
         <property name="resultSetLogEnabled" value="false" />
         <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>
    <!-- 慢SQL记录  *end* -->
    <!-- ========================================================-->



    <!-- ==============================事物配置============================== -->
    <!-- 注解配置-->
    <tx:annotation-driven/>
    <!-- 定义事务管理器（声明式的事务） -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>
    <!-- 事务增强，这里用的是spring提供的特性-->
    <tx:advice id="advice">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="has*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- =================================================================== -->


    <!-- ============================mapper的注入============================ -->
    <!-- Session Factory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <!--classpath:xxx和classpath*:xxx是不一样的，前者表示引入一个，后者表示引入多个。-->
        <property name="mapperLocations" value="classpath*:com/westboy/dao/mapper/*.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.westboy.dao"/>
    </bean>
    <!-- =================================================================== -->
</beans>
